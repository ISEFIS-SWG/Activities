{"ast":null,"code":"var _jsxFileName = \"/Users/pratyas/Documents/MobileAppProject/MymobileApp/TOTRun/src/pages/Tab4.tsx\";\nimport React, { useState } from 'react';\nimport { locate } from \"ionicons/icons\";\nimport { Plugins } from \"@capacitor/core\";\nimport GoogleMapReact from 'google-map-react';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonButton, IonIcon, IonButtons, IonContent, IonLoading, useIonViewDidEnter } from '@ionic/react';\nconst {\n  Geolocation\n} = Plugins;\n\nconst Tab4 = props => {\n  const [showLoading, setShowLoading] = useState(false);\n  const [positionReady, setPositionReady] = useState(false);\n  const [currentPosition, setCurrentPosition] = useState({\n    lat: 0,\n    lng: 0,\n    acc: 0,\n    time: 0\n  });\n  const [startPosition, setStartPosition] = useState({\n    lat: 0,\n    lng: 0,\n    acc: 0,\n    time: 0\n  });\n  const [startReady, setStartReady] = useState(true);\n  const [startStatus, setStartStatus] = useState({\n    time: 0\n  });\n  const [totalDistance, setTotalDistance] = useState(0);\n\n  let onMapLoad = (map, mapsAPI) => {\n    let directionsService = new mapsAPI.DirectionsService();\n    let directionsRenderer = new mapsAPI.DirectionsRenderer();\n    directionsRenderer.setMap(map);\n    let start = {\n      lat: 9.1106153,\n      lng: 99.3018452\n    };\n    let end = {\n      lat: 6.9506242,\n      lng: 100.41277989999999\n    };\n    var waypts = [7.669402, 100.022582];\n    let request = {\n      origin: end,\n      destination: end,\n      waypoints: [{\n        location: \"7.0451252, 100.1912893\",\n        stopover: true\n      }, {\n        location: \"7.003344, 100.326394\",\n        stopover: true\n      }],\n      optimizeWaypoints: true,\n      travelMode: 'WALKING'\n    };\n    directionsService.route(request, function (result, status) {\n      if (status == 'OK') {\n        directionsRenderer.setDirections(result);\n        let route = result.routes[0];\n        var totalDist = 0;\n\n        for (let i = 0; i < route.legs.length; i++) {\n          console.log('directionService', route.legs[i].distance.text);\n          totalDist += route.legs[i].distance.value;\n        }\n\n        let dis1 = route.legs[route.legs.length - 1].distance.value / 1000; // distance : km.\n\n        console.log(dis1 + ' km.');\n        let weight = 78; // kg.\n\n        let cal = weight * dis1 * 1.036;\n        console.log(cal.toFixed(2) + \" Kcal\");\n      }\n    });\n    let trafficLayer = new mapsAPI.TrafficLayer();\n  };\n\n  useIonViewDidEnter(() => {\n    startGetGPS();\n    startWatchGPS();\n  });\n\n  const startGetGPS = async () => {\n    console.log('Getting geolocation....startGetGPS');\n    setShowLoading(true);\n    let position1 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n    setCurrentPosition({\n      lat: position1.coords.latitude,\n      lng: position1.coords.longitude,\n      acc: position1.coords.accuracy,\n      time: position1.timestamp\n    });\n\n    if (startReady == true) {\n      setStartStatus({\n        time: position1.timestamp\n      });\n      setStartPosition({\n        lat: position1.coords.latitude,\n        lng: position1.coords.longitude,\n        acc: position1.coords.accuracy,\n        time: position1.timestamp\n      });\n      setStartReady(false);\n    } else {\n      setStartPosition({\n        lat: currentPosition.lat,\n        lng: currentPosition.lng,\n        acc: currentPosition.acc,\n        time: currentPosition.time\n      });\n    }\n\n    let lat = position1.coords.latitude;\n    let lng = position1.coords.longitude;\n    console.log('Current startGetGPS', lat, lng);\n  };\n\n  const getDistance = async () => {\n    console.log('Getting geolocation....getDistance');\n    setShowLoading(true);\n    let position1 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n    setCurrentPosition({\n      lat: position1.coords.latitude,\n      lng: position1.coords.longitude,\n      acc: position1.coords.accuracy,\n      time: position1.timestamp\n    });\n    let lat = position1.coords.latitude;\n    let lng = position1.coords.longitude;\n    let googleMap;\n\n    if (positionReady) {\n      googleMap = React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0'\n        },\n        defaultCenter: currentPosition,\n        defaultZoom: 15,\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: ({\n          map,\n          maps\n        }) => {\n          onMapLoad(map, maps);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      });\n    }\n  };\n\n  let watch1;\n\n  let startWatchGPS = () => {\n    console.log('Watching geolocation...startWatchGPS');\n    setShowLoading(true);\n    watch1 = Geolocation.watchPosition({}, (position, error) => {\n      console.log('new position', position);\n      setShowLoading(false);\n      setPositionReady(true);\n      setCurrentPosition({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        acc: position.coords.accuracy,\n        time: position.timestamp\n      });\n    });\n  };\n\n  let findDistance = (lat1, lon1, lat2, lon2) => {\n    let R = 6373; // km\n\n    let dLat = toRad(lat2 - lat1);\n    let dLon = toRad(lon2 - lon1);\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + toRad(Math.cos(lat1)) * toRad(Math.cos(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let d = R * c;\n\n    function toRad(Value) {\n      /** Converts numeric degrees to radians */\n      return Value * Math.PI / 180;\n    }\n    /* ทศนิยม 2 ตำแหน่ง */\n\n\n    let d_round_to_2nd = Number(d.toFixed(2));\n    console.log(\"ระยะทางได้ผลลัพธ์ = \" + d_round_to_2nd);\n    return d_round_to_2nd;\n  };\n  /* เพิ่มเลขศูนย์หน้า วัน เดือน เวลา ที่เป็นเลขหลักเดียว */\n\n\n  let addZero = i => {\n    if (i < '10') {\n      i = \"0\" + i;\n    }\n\n    return i;\n  };\n\n  let getDatetime = time => {\n    let myDate = new Date(time);\n    let d = addZero(myDate.getDate());\n    let m = addZero(myDate.getMonth());\n    let y = myDate.getFullYear();\n    let h = addZero(myDate.getHours());\n    let min = addZero(myDate.getMinutes());\n    let sec = addZero(myDate.getSeconds());\n    let times = d + '-' + m + '-' + y + ' ' + h + ':' + min + ':' + sec;\n    console.log('DateTime', times);\n    return times;\n  };\n\n  let durationtime = (timestart, timestop) => {\n    let time = timestop - timestart;\n    let mystartDate = new Date(timestart);\n    let mystopDate = new Date(timestop);\n    let myDate = new Date(time); // //let d = myDate.getDate();\n    // let m = myDate.getMonth();\n    // let y = myDate.getFullYear();\n\n    let h = addZero(myDate.getHours());\n    let min = addZero(myDate.getMinutes());\n    let sec = addZero(myDate.getSeconds());\n    let times = h + ':' + min + ':' + sec;\n    console.log('Time Start :', mystartDate);\n    console.log('Time Stop :', mystopDate);\n    console.log('Diff Time :', h, ':', min, ':', sec);\n    console.log(times);\n    return times;\n  };\n\n  let calduration = () => {\n    let x = durationtime(1453467965439, 1585492636444);\n    console.log(x + \" น.\");\n  };\n\n  let calories = (distance, weight) => {\n    let cal = (weight * distance * 1.036).toFixed(2);\n    console.log(cal + \" Kcal\");\n    return cal;\n  };\n\n  let calCalories = () => {\n    let x = calories(308, 78);\n    console.log(x + \" Kcal.\");\n  };\n\n  let startTextJSX;\n\n  if (positionReady == true) {\n    startTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, currentPosition.lat, \",\", currentPosition.lng, \",\", currentPosition.time);\n  } else {\n    startTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"\\u0E01\\u0E14\\u0E1B\\u0E38\\u0E48\\u0E21\\u0E1A\\u0E19\\u0E02\\u0E27\\u0E32\\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E23\\u0E30\\u0E1A\\u0E38\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\\u0E02\\u0E2D\\u0E07\\u0E40\\u0E04\\u0E23\\u0E37\\u0E48\\u0E2D\\u0E07\");\n  }\n\n  let stopTextJSX;\n  let distanceTextJSX;\n  let distance = findDistance(startPosition.lat, startPosition.lng, currentPosition.lat, currentPosition.lng); // setTotalDistance(totalDistance + distance);\n\n  let starttime = getDatetime(startStatus.time);\n  let stoptime = getDatetime(currentPosition.time);\n\n  if (positionReady == true) {\n    stopTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"LastPosition = \", startPosition.lat, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), \"latitude = \", startPosition.lng, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), \"Time = \", starttime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), \"CurrentPosition = \", currentPosition.lat, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), \"latitude = \", currentPosition.lng, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), \"timestamp = \", stoptime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }));\n    distanceTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Distance = \", distance, \" totalDistance = \", totalDistance);\n  } else {\n    stopTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"\\u0E01\\u0E14\\u0E1B\\u0E38\\u0E48\\u0E21\\u0E1A\\u0E19\\u0E02\\u0E27\\u0E32\\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E23\\u0E30\\u0E1A\\u0E38\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\\u0E02\\u0E2D\\u0E07\\u0E40\\u0E04\\u0E23\\u0E37\\u0E48\\u0E2D\\u0E07\");\n  }\n\n  let googleMap;\n\n  if (positionReady) {\n    googleMap = React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0'\n      },\n      defaultCenter: currentPosition,\n      defaultZoom: 15,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        onMapLoad(map, maps);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(IonPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, React.createElement(IonHeader, {\n    translucent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, React.createElement(IonToolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(IonTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, \"Easy Running#1\"), React.createElement(IonButtons, {\n    slot: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(IonButton, {\n    onClick: startWatchGPS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(IonIcon, {\n    icon: locate,\n    slot: \"icon-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  })), React.createElement(IonButton, {\n    expand: \"full\",\n    color: \"primary\",\n    shape: \"round\",\n    slot: \"start\",\n    size: \"large\",\n    onClick: startGetGPS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Start\"), React.createElement(IonButton, {\n    expand: \"block\",\n    color: \"secondary\",\n    shape: \"round\",\n    slot: \"start\",\n    size: \"large\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, \"Stop\")))), React.createElement(IonContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, React.createElement(\"body\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      height: '90vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, stopTextJSX, distanceTextJSX)), React.createElement(IonLoading, {\n    isOpen: showLoading,\n    message: \"\\u0E01\\u0E33\\u0E25\\u0E31\\u0E07\\u0E02\\u0E2D\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  })));\n};\n\nexport default Tab4;","map":{"version":3,"sources":["/Users/pratyas/Documents/MobileAppProject/MymobileApp/TOTRun/src/pages/Tab4.tsx"],"names":["React","useState","locate","Plugins","GoogleMapReact","IonPage","IonHeader","IonToolbar","IonTitle","IonButton","IonIcon","IonButtons","IonContent","IonLoading","useIonViewDidEnter","Geolocation","Tab4","props","showLoading","setShowLoading","positionReady","setPositionReady","currentPosition","setCurrentPosition","lat","lng","acc","time","startPosition","setStartPosition","startReady","setStartReady","startStatus","setStartStatus","totalDistance","setTotalDistance","onMapLoad","map","mapsAPI","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","setMap","start","end","waypts","request","origin","destination","waypoints","location","stopover","optimizeWaypoints","travelMode","route","result","status","setDirections","routes","totalDist","i","legs","length","console","log","distance","text","value","dis1","weight","cal","toFixed","trafficLayer","TrafficLayer","startGetGPS","startWatchGPS","position1","getCurrentPosition","coords","latitude","longitude","accuracy","timestamp","getDistance","googleMap","key","maps","watch1","watchPosition","position","error","findDistance","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","Value","PI","d_round_to_2nd","Number","addZero","getDatetime","myDate","Date","getDate","m","getMonth","y","getFullYear","h","getHours","min","getMinutes","sec","getSeconds","times","durationtime","timestart","timestop","mystartDate","mystopDate","calduration","x","calories","calCalories","startTextJSX","stopTextJSX","distanceTextJSX","starttime","stoptime","height","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { locate, laptop, time } from \"ionicons/icons\";\r\nimport { Plugins } from \"@capacitor/core\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { RefresherEventDetail } from '@ionic/core';\r\nimport { start } from 'repl';\r\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonButton, IonIcon, IonButtons, IonContent, IonLoading, useIonViewDidEnter } from '@ionic/react';\r\nimport { RouteComponentProps, useHistory } from 'react-router';\r\nimport { strict } from 'assert';\r\n\r\nconst { Geolocation } = Plugins;\r\nconst Tab4: React.FC<RouteComponentProps> = (props) => {\r\n  const [showLoading, setShowLoading] = useState(false);\r\n  const [positionReady, setPositionReady] = useState(false);\r\n  const [currentPosition, setCurrentPosition] = useState({ lat: 0, lng: 0, acc: 0, time: 0 });\r\n  const [startPosition, setStartPosition] = useState({ lat: 0, lng: 0, acc: 0, time: 0 });\r\n  const [startReady, setStartReady] = useState(true);\r\n  const [startStatus, setStartStatus] = useState({time: 0});\r\n  const [totalDistance,setTotalDistance] = useState(0);\r\n\r\n\r\n\r\n  let onMapLoad = (map: any, mapsAPI: any) => {\r\n    let directionsService = new mapsAPI.DirectionsService();\r\n    let directionsRenderer = new mapsAPI.DirectionsRenderer();\r\n    directionsRenderer.setMap(map)\r\n    let start = { lat: 9.1106153, lng: 99.3018452 };\r\n\r\n    let end = { lat: 6.9506242, lng: 100.41277989999999 };\r\n\r\n    var waypts = [7.669402, 100.022582]\r\n\r\n    let request = {\r\n      origin: end,\r\n      destination: end,\r\n      waypoints: [\r\n        {\r\n          location: \"7.0451252, 100.1912893\",\r\n          stopover: true\r\n        },\r\n        {\r\n          location: \"7.003344, 100.326394\",\r\n          stopover: true\r\n        }\r\n      ],\r\n      optimizeWaypoints: true,\r\n      travelMode: 'WALKING'\r\n\r\n    };\r\n\r\n    directionsService.route(request, function (result: any, status: any) {\r\n\r\n      if (status == 'OK') {\r\n        directionsRenderer.setDirections(result);\r\n        let route = result.routes[0];\r\n\r\n        var totalDist = 0;\r\n\r\n        for (let i = 0; i < route.legs.length; i++) {\r\n          console.log('directionService', route.legs[i].distance.text)\r\n          totalDist += route.legs[i].distance.value;\r\n        }\r\n\r\n\r\n        let dis1 = route.legs[route.legs.length - 1].distance.value / 1000; // distance : km.\r\n        console.log(dis1 + ' km.')\r\n        let weight = 78 // kg.\r\n        let cal = weight * dis1 * 1.036\r\n        console.log(cal.toFixed(2) + \" Kcal\")\r\n      }\r\n    });\r\n    let trafficLayer = new mapsAPI.TrafficLayer();\r\n  }\r\n\r\n  useIonViewDidEnter(() => {\r\n    startGetGPS();\r\n    startWatchGPS();\r\n  });\r\n\r\n\r\n\r\n  const startGetGPS = async () => {\r\n    console.log('Getting geolocation....startGetGPS');\r\n    setShowLoading(true);\r\n    let position1 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n\r\n    setCurrentPosition({\r\n      lat: position1.coords.latitude,\r\n      lng: position1.coords.longitude,\r\n      acc: position1.coords.accuracy,\r\n      time: position1.timestamp\r\n    });\r\n\r\n    if (startReady == true) {\r\n      setStartStatus({\r\n        time: position1.timestamp\r\n      }\r\n      )\r\n      setStartPosition({\r\n        lat: position1.coords.latitude,\r\n        lng: position1.coords.longitude,\r\n        acc: position1.coords.accuracy,\r\n        time: position1.timestamp\r\n      })\r\n      setStartReady(false);\r\n    } else {\r\n\r\n      setStartPosition({\r\n        lat: currentPosition.lat,\r\n        lng: currentPosition.lng,\r\n        acc: currentPosition.acc,\r\n        time: currentPosition.time\r\n      })\r\n    }\r\n\r\n\r\n\r\n    let lat = position1.coords.latitude;\r\n    let lng = position1.coords.longitude;\r\n    console.log('Current startGetGPS', lat, lng);\r\n\r\n  }\r\n  const getDistance = async () => {\r\n    console.log('Getting geolocation....getDistance');\r\n    setShowLoading(true);\r\n    let position1 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n    setCurrentPosition({\r\n      lat: position1.coords.latitude,\r\n      lng: position1.coords.longitude,\r\n      acc: position1.coords.accuracy,\r\n      time: position1.timestamp\r\n    });\r\n    let lat = position1.coords.latitude;\r\n    let lng = position1.coords.longitude;\r\n\r\n    let googleMap;\r\n    if (positionReady) {\r\n      googleMap = (\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0' }}\r\n          defaultCenter={currentPosition}\r\n          defaultZoom={15}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map, maps }) => { onMapLoad(map, maps) }} >\r\n        </GoogleMapReact>\r\n      )\r\n    }\r\n  }\r\n  let watch1;\r\n  let startWatchGPS = () => {\r\n    console.log('Watching geolocation...startWatchGPS');\r\n    setShowLoading(true);\r\n    watch1 = Geolocation.watchPosition({}, (position, error) => {\r\n      console.log('new position', position);\r\n      setShowLoading(false);\r\n      setPositionReady(true);\r\n\r\n      setCurrentPosition({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n        acc: position.coords.accuracy,\r\n        time: position.timestamp\r\n      })\r\n    }\r\n    );\r\n  }\r\n\r\n\r\n\r\n  let findDistance = (lat1: any, lon1: any, lat2: any, lon2: any) => {\r\n    let R = 6373; // km\r\n    let dLat = toRad((lat2 - lat1));\r\n    let dLon = toRad((lon2 - lon1));\r\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      toRad(Math.cos(lat1)) * toRad(Math.cos(lat2)) *\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    function toRad(Value: any) {\r\n      /** Converts numeric degrees to radians */\r\n      return Value * Math.PI / 180;\r\n    }\r\n    /* ทศนิยม 2 ตำแหน่ง */\r\n  \r\n    let d_round_to_2nd = Number(d.toFixed(2));\r\n    console.log(\"ระยะทางได้ผลลัพธ์ = \" + d_round_to_2nd);\r\n    return d_round_to_2nd;\r\n  };\r\n\r\n  /* เพิ่มเลขศูนย์หน้า วัน เดือน เวลา ที่เป็นเลขหลักเดียว */\r\n  let addZero = (i: any) => {\r\n    if (i < '10') {\r\n      i = \"0\" + i;\r\n    }\r\n    return i;\r\n  }\r\n\r\n  let getDatetime = (time: any) => {\r\n\r\n    let myDate = new Date(time);\r\n    let d = addZero(myDate.getDate());\r\n    let m = addZero(myDate.getMonth());\r\n    let y = myDate.getFullYear();\r\n    let h = addZero(myDate.getHours());\r\n    let min = addZero(myDate.getMinutes());\r\n    let sec = addZero(myDate.getSeconds());\r\n    let times = d + '-' + m + '-' + y + ' ' + h + ':' + min + ':' + sec\r\n    console.log('DateTime', times);\r\n    return times;\r\n  };\r\n\r\n  let durationtime = (timestart: any, timestop: any) => {\r\n    let time = timestop - timestart;\r\n    let mystartDate = new Date(timestart);\r\n    let mystopDate = new Date(timestop);\r\n    let myDate = new Date(time);\r\n    // //let d = myDate.getDate();\r\n    // let m = myDate.getMonth();\r\n    // let y = myDate.getFullYear();\r\n    let h = addZero(myDate.getHours());\r\n    let min = addZero(myDate.getMinutes());\r\n    let sec = addZero(myDate.getSeconds());\r\n    let times = h + ':' + min + ':' + sec\r\n    console.log('Time Start :', mystartDate);\r\n    console.log('Time Stop :', mystopDate);\r\n    console.log('Diff Time :', h, ':', min, ':', sec);\r\n    console.log(times)\r\n    return times;\r\n  };\r\n\r\n  let calduration = () => {\r\n    let x = durationtime(1453467965439, 1585492636444);\r\n    console.log(x + \" น.\")\r\n  }\r\n\r\n  let calories = (distance: any, weight: any) => {\r\n\r\n    let cal = (weight * distance * 1.036).toFixed(2)\r\n    console.log(cal + \" Kcal\")\r\n    return cal;\r\n\r\n  };\r\n  let calCalories = () => {\r\n    let x = calories(308, 78);\r\n    console.log(x + \" Kcal.\")\r\n  }\r\n\r\n  let startTextJSX;\r\n\r\n  if (positionReady == true) {\r\n    startTextJSX = <p>{currentPosition.lat},{currentPosition.lng},{currentPosition.time}</p>\r\n  }\r\n  else {\r\n    startTextJSX = <p>กดปุ่มบนขวาเพื่อระบุพิกัดของเครื่อง</p>\r\n  }\r\n  let stopTextJSX;\r\n  let distanceTextJSX;\r\n  \r\n  let distance = findDistance(startPosition.lat, startPosition.lng, currentPosition.lat, currentPosition.lng);\r\n  // setTotalDistance(totalDistance + distance);\r\n  \r\n  let starttime = getDatetime(startStatus.time);\r\n  let stoptime = getDatetime(currentPosition.time);\r\n\r\n  if (positionReady == true) {\r\n\r\n\r\n    stopTextJSX = <p>LastPosition = {startPosition.lat}<br></br>\r\n                    latitude = {startPosition.lng}<br></br>\r\n                    Time = {starttime}<br></br>\r\n                    CurrentPosition = {currentPosition.lat}<br></br>\r\n                    latitude = {currentPosition.lng}<br></br>\r\n                    timestamp = {stoptime}<br></br></p>\r\n\r\n  distanceTextJSX = <p>Distance = {distance} totalDistance = {totalDistance}</p>\r\n  } else {\r\n    stopTextJSX = <p>กดปุ่มบนขวาเพื่อระบุพิกัดของเครื่อง</p>\r\n  }\r\n  let googleMap;\r\n  if (positionReady) {\r\n    googleMap = (\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0' }}\r\n        defaultCenter={currentPosition}\r\n        defaultZoom={15}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onGoogleApiLoaded={({ map, maps }) => { onMapLoad(map, maps) }} >\r\n      </GoogleMapReact>\r\n    )\r\n  }\r\n  return (\r\n    <IonPage>\r\n      <IonHeader translucent={true}>\r\n        <IonToolbar>\r\n          <IonTitle>Easy Running#1</IonTitle>\r\n          <IonButtons slot=\"end\">\r\n            <IonButton onClick={startWatchGPS}>\r\n              <IonIcon icon={locate} slot=\"icon-only\"></IonIcon>\r\n            </IonButton>\r\n            <IonButton expand=\"full\" color=\"primary\" shape=\"round\" slot=\"start\" size=\"large\" onClick={startGetGPS} >Start</IonButton>\r\n            <IonButton expand=\"block\" color=\"secondary\" shape=\"round\" slot=\"start\" size=\"large\" >Stop</IonButton>\r\n          </IonButtons>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n      <IonContent>\r\n        <body >\r\n          <div style={{ height: '90vh', width: '100%' }}>\r\n            {/* {startTextJSX} */}\r\n            {stopTextJSX}\r\n            {distanceTextJSX}\r\n            {/* {positionTextJSX} */}\r\n            {/* {googleMap}  */}\r\n            {/* {DistanceTextJSX} */}\r\n          </div>\r\n        </body>\r\n        <IonLoading isOpen={showLoading} message=\"กำลังขอพิกัด\" />\r\n      </IonContent>\r\n    </IonPage>\r\n  );\r\n};\r\nexport default Tab4;"]},"metadata":{},"sourceType":"module"}