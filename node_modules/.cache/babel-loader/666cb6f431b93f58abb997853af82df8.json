{"ast":null,"code":"var _jsxFileName = \"/Users/pratyas/Desktop/Mobile App Training/MymobileApp/TOTRun/src/pages/Tab4.tsx\";\nimport React, { useState } from 'react';\nimport { locate } from \"ionicons/icons\";\nimport { Plugins } from \"@capacitor/core\";\nimport GoogleMapReact from 'google-map-react';\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonButton, IonIcon, IonButtons, IonContent, IonLoading, useIonViewDidEnter } from '@ionic/react';\nconst {\n  Geolocation\n} = Plugins;\n\nconst Tab4 = () => {\n  const [showLoading, setShowLoading] = useState(false);\n  const [positionReady, setPositionReady] = useState(false);\n  const [currentPosition, setCurrentPosition] = useState({\n    lat: 0,\n    lng: 0,\n    acc: 0,\n    time: 0\n  });\n\n  let onMapLoad = (map, mapsAPI) => {\n    let directionsService = new mapsAPI.DirectionsService();\n    let directionsRenderer = new mapsAPI.DirectionsRenderer();\n    directionsRenderer.setMap(map); // let start = { lat: 9.1106153, lng: 99.3018452 };\n\n    let start = {\n      lat: currentPosition.lat,\n      lng: currentPosition.lng\n    }; // let end = { lat: 6.9506242, lng: 100.41277989999999 };\n\n    let end = {\n      lat: currentPosition.lat,\n      lng: currentPosition.lng\n    };\n    let request = {\n      origin: start,\n      destination: end,\n      travelMode: 'WALKING'\n    };\n    directionsService.route(request, function (result, status) {\n      if (status == 'OK') {\n        directionsRenderer.setDirections(result);\n        let route = result.routes[0];\n\n        for (let i = 0; i < route.legs.length; i++) {\n          console.log('directionService', route.legs[i].distance.text);\n        }\n      }\n    });\n    let trafficLayer = new mapsAPI.TrafficLayer();\n  };\n\n  useIonViewDidEnter(() => {\n    startGetGPS(); // startDistance();\n  });\n\n  const getDirection = async () => {\n    console.log('Getting geolocation....');\n    setShowLoading(true);\n    let position2 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n  };\n\n  const startGetGPS = async () => {\n    console.log('Getting geolocation....startGetGPS');\n    setShowLoading(true);\n    let position1 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n    setCurrentPosition({\n      lat: position1.coords.latitude,\n      lng: position1.coords.longitude,\n      acc: position1.coords.accuracy,\n      time: position1.timestamp\n    });\n    let lat = position1.coords.latitude;\n    let lng = position1.coords.longitude;\n    console.log('Current startGetGPS', lat, lng);\n  };\n\n  const startDistance = async () => {\n    console.log('Getting geolocation....');\n    setShowLoading(true);\n    let position1 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n    setCurrentPosition({\n      lat: position1.coords.latitude,\n      lng: position1.coords.longitude,\n      acc: position1.coords.accuracy,\n      time: position1.timestamp\n    });\n    let lat = position1.coords.latitude;\n    let lng = position1.coords.longitude;\n    let t = position1.timestamp;\n    console.log('Current', lat, lng, t);\n    console.log('Current', position1);\n  };\n\n  const getDistance = async () => {\n    console.log('Getting geolocation....');\n    setShowLoading(true);\n    let position1 = await Geolocation.getCurrentPosition();\n    setShowLoading(false);\n    setPositionReady(true);\n    setCurrentPosition({\n      lat: position1.coords.latitude,\n      lng: position1.coords.longitude,\n      acc: position1.coords.accuracy,\n      time: position1.timestamp\n    });\n    let googleMap;\n\n    if (positionReady) {\n      googleMap = React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0'\n        },\n        defaultCenter: currentPosition,\n        defaultZoom: 15,\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: ({\n          map,\n          maps\n        }) => {\n          onMapLoad(map, maps);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    }\n  };\n\n  let watch1;\n\n  let startWatchGPS = () => {\n    console.log('Watching geolocation...');\n    setShowLoading(true);\n    watch1 = Geolocation.watchPosition({}, (position, error) => {\n      console.log('new position', position);\n      setShowLoading(false);\n      setPositionReady(true);\n      setCurrentPosition({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        acc: position.coords.accuracy,\n        time: position.timestamp\n      });\n    });\n  };\n\n  let startTextJSX;\n\n  if (positionReady == true) {\n    startTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, currentPosition.lat, \",\", currentPosition.lng, \",\", currentPosition.time);\n  } else {\n    startTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"\\u0E01\\u0E14\\u0E1B\\u0E38\\u0E48\\u0E21\\u0E1A\\u0E19\\u0E02\\u0E27\\u0E32\\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E23\\u0E30\\u0E1A\\u0E38\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\\u0E02\\u0E2D\\u0E07\\u0E40\\u0E04\\u0E23\\u0E37\\u0E48\\u0E2D\\u0E07\");\n  }\n\n  let stopTextJSX;\n\n  if (positionReady == true) {\n    // stopTextJSX =  <p>{currentPosition.lat} , {currentPosition.lng} ,{currentPosition.time}</p>;\n    stopTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"longtitude = \", currentPosition.lat, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \"latitude = \", currentPosition.lng, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), \"timestamp = \", currentPosition.time);\n  } else {\n    stopTextJSX = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"\\u0E01\\u0E14\\u0E1B\\u0E38\\u0E48\\u0E21\\u0E1A\\u0E19\\u0E02\\u0E27\\u0E32\\u0E40\\u0E1E\\u0E37\\u0E48\\u0E2D\\u0E23\\u0E30\\u0E1A\\u0E38\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\\u0E02\\u0E2D\\u0E07\\u0E40\\u0E04\\u0E23\\u0E37\\u0E48\\u0E2D\\u0E07\");\n  }\n\n  let googleMap;\n\n  if (positionReady) {\n    googleMap = React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0'\n      },\n      defaultCenter: currentPosition,\n      defaultZoom: 15,\n      yesIWantToUseGoogleMapApiInternals: true,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        onMapLoad(map, maps);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(IonPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(IonHeader, {\n    translucent: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(IonToolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(IonTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Easy Running#1\"), React.createElement(IonButtons, {\n    slot: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(IonButton, {\n    onClick: getDirection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(IonIcon, {\n    icon: locate,\n    slot: \"icon-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), React.createElement(IonButton, {\n    expand: \"full\",\n    color: \"primary\",\n    shape: \"round\",\n    slot: \"start\",\n    size: \"large\",\n    onClick: startDistance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Start\"), React.createElement(IonButton, {\n    expand: \"block\",\n    color: \"secondary\",\n    shape: \"round\",\n    slot: \"start\",\n    size: \"large\",\n    onClick: getDistance,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Stop\")))), React.createElement(IonContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"body\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, stopTextJSX, googleMap)), React.createElement(IonLoading, {\n    isOpen: showLoading,\n    message: \"\\u0E01\\u0E33\\u0E25\\u0E31\\u0E07\\u0E02\\u0E2D\\u0E1E\\u0E34\\u0E01\\u0E31\\u0E14\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })));\n};\n\nexport default Tab4;","map":{"version":3,"sources":["/Users/pratyas/Desktop/Mobile App Training/MymobileApp/TOTRun/src/pages/Tab4.tsx"],"names":["React","useState","locate","Plugins","GoogleMapReact","IonPage","IonHeader","IonToolbar","IonTitle","IonButton","IonIcon","IonButtons","IonContent","IonLoading","useIonViewDidEnter","Geolocation","Tab4","showLoading","setShowLoading","positionReady","setPositionReady","currentPosition","setCurrentPosition","lat","lng","acc","time","onMapLoad","map","mapsAPI","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","setMap","start","end","request","origin","destination","travelMode","route","result","status","setDirections","routes","i","legs","length","console","log","distance","text","trafficLayer","TrafficLayer","startGetGPS","getDirection","position2","getCurrentPosition","position1","coords","latitude","longitude","accuracy","timestamp","startDistance","t","getDistance","googleMap","key","maps","watch1","startWatchGPS","watchPosition","position","error","startTextJSX","stopTextJSX","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { locate, laptop, time } from \"ionicons/icons\";\r\nimport { Plugins } from \"@capacitor/core\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { RefresherEventDetail } from '@ionic/core';\r\nimport { start } from 'repl';\r\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonButton, IonIcon, IonButtons, IonContent, IonLoading, useIonViewDidEnter } from '@ionic/react';\r\n\r\nconst { Geolocation } = Plugins;\r\nconst Tab4: React.FC = () => {\r\n  const [showLoading, setShowLoading] = useState(false);\r\n  const [positionReady, setPositionReady] = useState(false);\r\n  const [currentPosition, setCurrentPosition] = useState({ lat: 0, lng: 0, acc: 0, time: 0 });\r\n  let onMapLoad = (map: any, mapsAPI: any) => {\r\n    let directionsService = new mapsAPI.DirectionsService();\r\n    let directionsRenderer = new mapsAPI.DirectionsRenderer();\r\n    directionsRenderer.setMap(map)\r\n    // let start = { lat: 9.1106153, lng: 99.3018452 };\r\n    let start = { lat : currentPosition.lat,lng : currentPosition.lng}\r\n    // let end = { lat: 6.9506242, lng: 100.41277989999999 };\r\n    let end = { lat : currentPosition.lat,lng : currentPosition.lng}\r\n    let request = {\r\n      origin: start,\r\n      destination: end,\r\n       travelMode: 'WALKING'\r\n    };\r\n    directionsService.route(request, function (result: any, status: any) {\r\n      if (status == 'OK') {\r\n        directionsRenderer.setDirections(result);\r\n        let route = result.routes[0];\r\n        for (let i = 0; i < route.legs.length; i++) {\r\n          console.log('directionService',route.legs[i].distance.text)\r\n        }\r\n      }\r\n    });\r\n    let trafficLayer = new mapsAPI.TrafficLayer();\r\n  }\r\n  \r\n  useIonViewDidEnter(()=>{\r\n     startGetGPS();\r\n    // startDistance();\r\n  });\r\n\r\n  const getDirection = async () => {\r\n    console.log('Getting geolocation....');\r\n    setShowLoading(true);\r\n    let position2 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n  }\r\n  const startGetGPS = async () => {\r\n    console.log('Getting geolocation....startGetGPS');\r\n    setShowLoading(true);\r\n    let position1 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n    setCurrentPosition({\r\n      lat: position1.coords.latitude,\r\n      lng: position1.coords.longitude,\r\n      acc: position1.coords.accuracy,\r\n      time: position1.timestamp\r\n    });\r\n    let lat = position1.coords.latitude;\r\n    let lng = position1.coords.longitude;\r\n    console.log('Current startGetGPS', lat, lng);\r\n  }\r\n  const startDistance = async () => {\r\n    console.log('Getting geolocation....');\r\n    setShowLoading(true);\r\n    let position1 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n    setCurrentPosition({\r\n      lat: position1.coords.latitude,\r\n      lng: position1.coords.longitude,\r\n      acc: position1.coords.accuracy,\r\n      time: position1.timestamp\r\n    });\r\n    let lat = position1.coords.latitude;\r\n    let lng = position1.coords.longitude;\r\n    let t = position1.timestamp;\r\n    console.log('Current', lat, lng, t);\r\n    console.log('Current', position1);\r\n  }\r\n  const getDistance = async () => {\r\n    console.log('Getting geolocation....');\r\n    setShowLoading(true);\r\n    let position1 = await Geolocation.getCurrentPosition();\r\n    setShowLoading(false);\r\n    setPositionReady(true);\r\n    setCurrentPosition({\r\n      lat: position1.coords.latitude,\r\n      lng: position1.coords.longitude,\r\n      acc: position1.coords.accuracy,\r\n      time: position1.timestamp\r\n    });\r\n    let googleMap;\r\n    if (positionReady) {\r\n      googleMap = (\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0' }}\r\n          defaultCenter={currentPosition}\r\n          defaultZoom={15}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map, maps }) => { onMapLoad(map, maps) }} >\r\n        </GoogleMapReact>\r\n      )\r\n    }\r\n  }\r\n  let watch1;\r\n  let startWatchGPS = () => {\r\n    console.log('Watching geolocation...');\r\n    setShowLoading(true);\r\n    watch1 = Geolocation.watchPosition({}, (position, error) => {\r\n      console.log('new position', position);\r\n      setShowLoading(false);\r\n      setPositionReady(true);\r\n      setCurrentPosition({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n        acc: position.coords.accuracy,\r\n        time: position.timestamp\r\n      })\r\n    }\r\n    );\r\n  }\r\nlet startTextJSX;\r\n  if (positionReady == true) {\r\n    startTextJSX = <p>{currentPosition.lat},{currentPosition.lng},{currentPosition.time}</p>\r\n  }\r\n  else {\r\n    startTextJSX = <p>กดปุ่มบนขวาเพื่อระบุพิกัดของเครื่อง</p>\r\n  }\r\n let stopTextJSX ;\r\n  if (positionReady == true) {\r\n    // stopTextJSX =  <p>{currentPosition.lat} , {currentPosition.lng} ,{currentPosition.time}</p>;\r\n    stopTextJSX = <p>longtitude = {currentPosition.lat}<br></br>latitude = {currentPosition.lng}<br></br>timestamp = {currentPosition.time}</p>\r\n  } else {\r\n    stopTextJSX = <p>กดปุ่มบนขวาเพื่อระบุพิกัดของเครื่อง</p>\r\n  }\r\n    let googleMap;\r\n  if (positionReady) {\r\n    googleMap = (\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: 'AIzaSyATDm0MlJIxUXoIU56PIOk3aY26XXs6ul0' }}\r\n        defaultCenter={currentPosition}\r\n        defaultZoom={15}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onGoogleApiLoaded={({ map, maps }) => { onMapLoad(map, maps) }} >\r\n      </GoogleMapReact>\r\n    )\r\n  }\r\n  return (\r\n     <IonPage>\r\n      <IonHeader translucent={true}>\r\n         <IonToolbar>\r\n          <IonTitle>Easy Running#1</IonTitle>\r\n          <IonButtons slot = \"end\">\r\n          <IonButton onClick={getDirection}>\r\n               <IonIcon icon={locate} slot=\"icon-only\"></IonIcon>\r\n             </IonButton>\r\n            <IonButton expand=\"full\" color=\"primary\" shape=\"round\" slot=\"start\" size=\"large\" onClick={startDistance}>Start</IonButton>\r\n            <IonButton expand=\"block\" color=\"secondary\" shape=\"round\" slot=\"start\" size=\"large\" onClick={getDistance}>Stop</IonButton>\r\n           </IonButtons>\r\n        </IonToolbar>\r\n       </IonHeader>\r\n       <IonContent>\r\n         <body >\r\n           <div style={{ height: '100vh', width: '100%' }}>\r\n             {/* {startTextJSX} */}\r\n             {stopTextJSX}\r\n             {googleMap}\r\n             {/* {positionTextJSX} */}\r\n             {/* {googleMap}  */}\r\n             {/* {DistanceTextJSX} */}\r\n           </div>\r\n         </body>\r\n         <IonLoading isOpen={showLoading} message=\"กำลังขอพิกัด\" />\r\n       </IonContent>\r\n     </IonPage>\r\n  );\r\n  };\r\nexport default Tab4;"]},"metadata":{},"sourceType":"module"}